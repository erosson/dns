#!/bin/bash
set -eu
# cd "$(dirname "$0")"
usage() {
    echo "$@"
    echo "overwrites local git branch BRANCH_NAME with a single commit containing the contents of DIRECTORY."
    echo "usage: $0 DIRECTORY [BRANCH_NAME] [COMMIT_MESSAGE]"
    exit 1
}

[ "$#" == "1" ] || [ "$#" == "2" ] || [ "$#" == "3" ] || usage
DIST="$1"
CURRENT_BRANCH="$(git branch --show-current)"
RELEASE_BRANCH="${2:-${CURRENT_BRANCH}.release}"
COMMIT_MSG="${3:-release of branch $(git branch --show-current)}"
[ -d "$DIST" ] || (usage "not a directory: $DIST")
[ "" != "$RELEASE_BRANCH" ] || (usage "must be nonempty: $RELEASE_BRANCH")
[ "" != "$COMMIT_MSG" ] || (usage "must be nonempty: $COMMIT_MESSAGE")
echo DIST="$DIST" RELEASE_BRANCH="$RELEASE_BRANCH" COMMIT_MSG="$COMMIT_MSG"

# the process:
# - init an empty temporary git repository
# - commit the released files to the new repo
# - (force-)push the temp repo back to the main repository's release branch
SELF="$(git rev-parse --show-toplevel)"
TMPGIT="$(mktemp -d)"
set -x
git init "$TMPGIT"

# subtrees are one way to do this, but I don't understand it as well.
# An empty repo takes more lines - but it's easier to understand, and we don't
# have to figure out how to clear the release branch's history
#git subtree push --no-verify --prefix="$DIST"

mkdir -p "$TMPGIT/release"
cp -a "$DIST/." "$TMPGIT/release"
cd "$TMPGIT"
cat <<EOF > README.md
Deploy the contents of \`/release\` to any static site webhost. No additional build step required - this branch is a snapshot of the \`$CURRENT_BRANCH\` branch's latest build output.

_Why?_ This branch decouples build/CI from webhosting/deployment. It's much easier to switch webhosts later!

Created using https://github.com/erosson/infra/blob/main/tf/modules/git-release-branch

    $(basename $0) $@
EOF
git status
git checkout --orphan tmp-release
git add -A
git commit -m "$COMMIT_MSG"

git push --no-verify -f "$SELF" tmp-release:"$RELEASE_BRANCH"
cd "$SELF"
rm -rf "$TMPGIT"

git log "$RELEASE_BRANCH"
git ls-tree -r --name-only "$RELEASE_BRANCH"